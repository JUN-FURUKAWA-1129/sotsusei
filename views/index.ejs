<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>デジタル東京</title>
    <link href="/stylesheets/style.css" rel="stylesheet" type="text/css">
    <link href="/stylesheets/colorbox.css" rel="stylesheet" type="text/css">
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="/javascripts/jquery.colorbox-min.js"></script>
    <script src="/javascripts/jquery.colorbox-ja.js"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div class="loading">
        <img src="/images/top-loading.gif" alt="読込中です。">
    </div>
    <script>
        $(window).on('load', function () {
            $('.loading').fadeOut();
        });
    </script>
     <script id="vshader_box" type="x-shader/v-shader">
        uniform float sec;

        varying vec2 vUv;
        varying vec4 worldPosition;
        
        void main() {
            vUv=uv;
        
            worldPosition = modelMatrix * vec4( position, 1.0 );
            vec4 mvPosition =  viewMatrix * worldPosition;
            gl_Position = projectionMatrix * mvPosition;

        }</script>
    <script id="fshader_box" type="x-shader/f-shader">
        uniform float sec;
        uniform sampler2D texture0;
        
        varying vec2 vUv;
        varying vec4 worldPosition;
        
            void main() {
                float a;
                a=1.0;

                if(worldPosition.z > 2100.0){
                    a=0.0;
                }
                gl_FragColor = vec4(a , a  ,1.0 - (sin(sec) + 1.0)*0.1, 1.0);
            }</script>
    <script id="vshader_sky" type="x-shader/v-shader">
            uniform float sec;

            varying  vec4 vColor;
            varying vec2 vUv;
            
            void main() {
                vColor = vec4(1.0, 1.0, 1.0, 1.0);
                vUv=uv;
            
                vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
                vec4 mvPosition =  viewMatrix * worldPosition;
                gl_Position = projectionMatrix * mvPosition;
            }</script>
    <script id="fshader_sky" type="x-shader/f-shader">
            uniform float sec;
            uniform sampler2D texture1;

            varying vec2 vUv;
            varying vec4 vColor;

            void main() {
            vec4 smpColor=texture2D(texture1,vUv);
            gl_FragColor =vColor*smpColor;
            }</script>

        <script id="vshader_cylinder" type="x-shader/v-shader">
            uniform float sec;
    
            varying  vec4 vColor;
            varying vec2 vUv;
                
            void main() {
                vColor = vec4(1.0, 1.0, 1.0- (sin(sec) + 1.0)*0.1, 1.0);
                vUv=uv;
                
                vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
                vec4 mvPosition =  viewMatrix * worldPosition;
                gl_Position = projectionMatrix * mvPosition;
            }</script>
        <script id="fshader_cylinder" type="x-shader/f-shader">
                uniform float sec;
                uniform sampler2D texture0;
    
                varying vec2 vUv;
                varying vec4 vColor;
    
                void main() {
                vec4 smpColor=texture2D(texture0,vUv);
                gl_FragColor =vColor*smpColor;
                }</script>

    <div id="canvas-container">
        <canvas id="myCanvas"></canvas>
    </div>
    
    <!--<script src="/socket.io/socket.io.js"></script>-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.0/socket.io.js"></script>

    <script type="module">

        import * as THREE from '/build/three.module.js';
        import { OrbitControls } from '/javascripts/OrbitControls.js';
        import { Rhino3dmLoader } from '/javascripts/3DMLoader.js';

        //shader
        const vertexSource_box = document.getElementById("vshader_box").textContent;
        const fragmentSource_box = document.getElementById("fshader_box").textContent;
        const vertexSource_sky = document.getElementById("vshader_sky").textContent;
        const fragmentSource_sky = document.getElementById("fshader_sky").textContent;
        const vertexSource_cylinder = document.getElementById("vshader_cylinder").textContent;
        const fragmentSource_cylinder = document.getElementById("fshader_cylinder").textContent;

        //loader
        const loader = new Rhino3dmLoader();

        let container, controls;
        let camera, scene, renderer;
        let raycaster, mouse;
        let meshList;
        let target;
        let i;
        let Rhino, chara;
        let sec;
        let dir;
        let camera_TP;

        init();
        animate();
        OnResize();

        window.addEventListener("resize", OnResize);

        function init() {

            //setup
            mouse = new THREE.Vector2();
            const canvas = document.querySelector("#myCanvas");

            THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);
            container = document.createElement('div');
            document.body.appendChild(container);

            //camera
            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 20000);

            /*
            camera_TP= new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 2000 );
            camera_TP.position.set( 0, - 10, 1.5 );
            controls = new OrbitControls( camera_TP, container );
            */
            scene = new THREE.Scene();
            /*
            canvas.addEventListener("mousemove", handleMouseMove);

            function handleMouseMove(event) {
                const element = event.currentTarget;

                const x = event.clientX - element.offsetLeft;
                const y = event.clientY - element.offsetTop;

                const w = element.offsetWidth;
                const h = element.offsetHeight;

                mouse.x = (x / w) * 2 - 1;
                mouse.y = -(y / h) * 2 + 1;

                if (event.buttons === 1) {
                    camera.rotateOnWorldAxis(new THREE.Vector3(0, 0, 1), event.movementX * 0.01);
                    chara.rotateOnWorldAxis(new THREE.Vector3(0, 0, 1), event.movementX * 0.01);
                }

            }
            */
            //light
            const directionalLight = new THREE.DirectionalLight(0x404040);
            directionalLight.position.set(0, 0, 5000);
            directionalLight.intensity = 1.0;
            scene.add(directionalLight);

            const directionalLight2 = new THREE.DirectionalLight(0x404040);
            directionalLight2.position.set(0, -1000, 2000);
            directionalLight2.intensity = 1.0;
            scene.add(directionalLight2);

            const ambientLight = new THREE.AmbientLight(0x404040, 3.0);
            scene.add(ambientLight);

            meshList = [];
            //load .3dm data
            //square
            //const loader = new Rhino3dmLoader();
            loader.setLibraryPath('/javascripts/');

            loader.load('/models/square.3dm', function (object) {
                object.name = "square";
                Rhino = object;
                scene.add(object);
            });
            /*
            loader.load('/models/man.3dm', function (object) {
                object.name = "char";
                object.position.set(0,-5000, 0);
                chara = object;
                //scene.add(object);
                //meshList.push(object);
            });
            */

            //load images
            const tex_loader = new THREE.TextureLoader();
            const image0 = tex_loader.load("/images/billboardtexture.jpg");
            const image1 = tex_loader.load("/images/sky.png");

            //add uniform variables
            container.uniforms = {
                sec: {
                    value: sec
                },
                texture0: {
                    value: image0
                },
                texture1: {
                    value: image1
                }
            }

            //create shader material
            const mat_sky = new THREE.ShaderMaterial({
                uniforms: container.uniforms,
                vertexShader: vertexSource_sky,
                fragmentShader: fragmentSource_sky,
                side: THREE.BackSide
            });

            const mat_box = new THREE.ShaderMaterial({
                uniforms: container.uniforms,
                vertexShader: vertexSource_box,
                fragmentShader: fragmentSource_box
            });

            const mat_cylinder = new THREE.ShaderMaterial({
                uniforms: container.uniforms,
                vertexShader: vertexSource_cylinder,
                fragmentShader: fragmentSource_cylinder,
                side: THREE.DoubleSide
            });

            //create geometry
            //sky
            const mySphere = new THREE.SphereGeometry(10000, 32, 32);
            const mesh0 = new THREE.Mesh(mySphere, mat_sky);
            scene.add(mesh0);
            meshList.push(mesh0);

            //cylinder
            const myCylinder = new THREE.CylinderGeometry(1500, 1500, 300, 32, 4, true);
            const mesh1 = new THREE.Mesh(myCylinder, mat_cylinder);
            mesh1.name = "Cylinder";
            mesh1.position.set(0, 0, 3000);
            mesh1.rotation.x = Math.PI / 2;
            scene.add(mesh1);
            meshList.push(mesh1);

            //cube
            const myBox = new THREE.BoxBufferGeometry(1500, 1500, 1500);
            const mesh2 = new THREE.Mesh(myBox, mat_box);
            mesh2.name = "Box";
            mesh2.position.set(0, 0, 1750);
            scene.add(mesh2);
            meshList.push(mesh2);

            // create renderer
            const width = window.innerWidth;
            const height = window.innerHeight;

            renderer = new THREE.WebGLRenderer({
                antialias: true,
                canvas: canvas,
                alpha: true
            });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(width, height);
            renderer.setClearColor(0x000000, 0);
            container.appendChild(renderer.domElement);

            raycaster = new THREE.Raycaster();

            animate();

            //eventlistener


            window.addEventListener('resize', resize, false);

            //canvas.addEventListener("click", handleMouseMove, false);
            canvas.addEventListener("dblclick", clickPosition, false);


            function clickPosition(event) {
                if (target.name === "Box") {
                    var top = window.innerHeight / 2;
                    var left = window.innerWidth / 2;
                    var WIDTH = 900;
                    var HEIGHT = 900;
                    var x = left - (WIDTH / 2);
                    var y = top - (HEIGHT / 2);

                    //window.location.href="/board";

                    var url = '/board'
                    window.open(url, null, 'top=' + y + ',left=' + x + ',width=900,height=900');
                }
            }

            /*
            dir = camera.getWorldDirection();

            document.addEventListener("keydown", move);
            function move(event) {
                var keyname = event.key;
                if (keyname === "w") {
                    const pos = camera.position;
                    dir = camera.getWorldDirection();

                    pos.x += dir.x * 100;
                    pos.y += dir.y * 100;
                    chara.position.x += dir.x * 100;
                    chara.position.y += dir.y * 100;
                }

                if (keyname === "s") {
                    const pos = camera.position;
                    dir = camera.getWorldDirection();

                    pos.x -= dir.x * 100;
                    pos.y -= dir.y * 100;
                    chara.position.x -= dir.x * 100;
                    chara.position.y -= dir.y * 100;
                }
            }
            */
        }

        function resize() {

            const width = window.innerWidth;
            const height = window.innerHeight;

            camera.aspect = width / height;
            camera.updateProjectionMatrix();

            renderer.setSize(width, height);

        }

        function animate() {

            raycaster.setFromCamera(mouse, camera);
            sec = performance.now() / 1000;
            container.uniforms.sec.value = sec;

            meshList.map(mesh => {
                if (mesh.name === "Box" ) {
                    mesh.rotation.z = sec * 0.1;
                }else if (mesh.name === "Cylinder") {
                    mesh.rotation.y = sec * 0.1;
                }
            })

            const intersects = raycaster.intersectObjects(meshList);

            meshList.map(mesh => {
                if (intersects.length > 0 && mesh === intersects[0].object) {
                    target = mesh;
                }
            })
            renderer.render(scene, camera);

            requestAnimationFrame(animate);

        }

        function OnResize() {
            const width = window.innerWidth;
            const height = window.innerHeight;

            renderer.setPixelRatio(window.devicePixelRation);
            renderer.setSize(width, height);

            camera.aspect = width / height;
            camera.updateProjectionMatrix();
        }

        /////////////

        const socket = io();
   
        function gamestart(){
            socket.emit("game-start");
            console.log("emit game-start");
        };

        gamestart();
            
        let movement = {};
        $(document).on('keydown keyup', (event) => {
            const KeyToCommand = {
                'w': 'forward',
                's': 'back',
                'd': 'left',
                'a': 'right',
            };
            const command = KeyToCommand[event.key];
            if(command){
                if(event.type === 'keydown'){
                    movement[command] = true;
                }else{ // keyup 
                    movement[command] = false;
                }
                socket.emit('movement', movement);
                console.log("emit movement");
            }
        });

        const Meshes = [];
        socket.on('state', (players) => {
            Object.values(Meshes).forEach((mesh) => {mesh.used = false;});
    
            // Players
            Object.values(players).forEach((player) => {

                let playerMesh = Meshes[player.id];

                if(!playerMesh){
                    console.log('create player mesh');
                    playerMesh = new THREE.Group();
                    playerMesh.castShadow = true;
                    Meshes[player.id] = playerMesh;
                    scene.add(playerMesh);
                }
                    
                playerMesh.used = true;
                playerMesh.position.set(player.x, player.y, 0);
                playerMesh.rotation.z = player.angle;

                if(!playerMesh.getObjectByName('body')){
                    console.log('create body mesh');
                    loader.load('/models/man.3dm', function (object) {
                        object.castShadow = true;
                        object.name = 'body';
                        playerMesh.add(object);
                    });
                }
        
                if(player.socketID === socket.id){
                    // Your player
                    camera.position.set(player.x, player.y, 1500);
                    camera.rotation.set(Math.PI/2, player.angle-Math.PI/2, 0);
                }
                
            });

            Object.keys(Meshes).forEach((key) => {
                    const mesh = Meshes[key];
                    if(!mesh.used){
                        console.log('removing mesh', key);
                        scene.remove(mesh);
                        mesh.traverse((mesh2) => {
                            if(mesh2.geometry){
                                mesh2.geometry.dispose();
                            }
                        });
                    delete Meshes[key];
                    }
            });
        });
 
        ////////////

    </script>
</body>

</html>
