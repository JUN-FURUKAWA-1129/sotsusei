#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sotusei-main:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 * ポート番号の指定
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ADDED!! Require Socket.IO
 */
var io = require('socket.io')(server);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * ADDED!! Socket.IO Connection.
 */

class Player{
  constructor(obj={}){
    this.socketID = obj.socketID;
    this.id=Math.floor(Math.random()*1000000000);
    this.x=-5000;
    this.y=-0;
    this.angle=0;
    this.movement={};
  }

  move(distance){
    this.x+=distance*Math.cos(this.angle);
    this.y+=distance*Math.sin(this.angle);
  }
};

let players={};

io.sockets.on("connection", function(socket){
  let player=null;
  socket.on("game-start",function(){
    player = new Player({
      socketID: socket.id,
    });
    players[player.id]=player;
  });

  socket.on("movement",function(movement){
    if(!player){return;}
    player.movement=movement;
  });

  socket.on("disconnect",()=>{
    if(!player){return;}
    delete players[player.id];
    player=null;
    console.log("disconnect");
  });

});

setInterval(function(){
  Object.values(players).forEach((player) => {
    const movement = player.movement;
    if(movement.forward){
      player.move(50);
      console.log(player.x,player.y);
    }
    if(movement.back){
      player.move(-50);
    }
    if(movement.left){
      player.angle -= 0.1;
    }
    if(movement.right){
      player.angle += 0.1;
    }
  });
  io.sockets.emit("state",players);
},1000/30);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);//parseInt(変換したい値, 基数。この場合は10進数で変換)

  if (isNaN(port)) { //isNaNで数値ではないかを判定している　trueなら文字列
    // named pipe
    console.log("server listen on :" + port)
    return val;
  }

  if (port >= 0) {
    // port number
    console.log("server listen on :" + port)
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
